#Install BS4 and requests
!pip3 install beautifulsoup4
!pip3 install requests

import sys
import requests
from bs4 import BeautifulSoup
import re
import unicodedata
import pandas as pd

##Helper functions to proecss web scraped HTMl table

#Return data and time from the HTML table cell
#Input: Element of a table cell extracts extra row
def date_time(table_cells):
    return [data_time.strip() for data_time in list(table_cells.strings)][0:2]

#Return version from the HTML  table cell 
#Input: Element of a table data cell extracts extra row
def booster_version(table_cells):
    out=''.join([booster_version for i,booster_version in enumerate( table_cells.strings) if i%2==0][0:-1])
    return out

#Return landing status from the HTML table cell
#Input: Element of a table data cell extracts extra row
def landing_status(table_cells):
    out=[i for i in table_cells.strings][0]
    return out

def get_mass(table_cells):
    mass=unicodedata.normalize("NFKD", table_cells.text).strip()
    if mass:
        mass.find("kg")
        new_mass=mass[0:mass.find("kg")+2]
    else:
        new_mass=0
    return new_mass

#Return landing status from the HTML table cell
#Input: Element of a able data cell extracts extra row
def extract_column_from_header(row):
    if (row.br):
        row.br.extract()
    if row.a:
        row.a.extract()
    if row.sup:
        row.sup.extract()
        
    colunm_name = ' '.join(row.contents)
    
#Filter the digit and empty names
    if not(colunm_name.strip().isdigit()):
        colunm_name = colunm_name.strip()
        return colunm_name    


#Scrape data
static_url = "https://en.wikipedia.org/w/index.php?title=List_of_Falcon_9_and_Falcon_Heavy_launches&oldid=1027686922"

#Use requests.get() method with the provided static_url and assigning response to an object
r = requests.get(static_url)

#Create a beautiful soup object
soup = BeautifulSoup(r.text, 'html.parser')

#Print the page title to verify if the `BeautifulSoup` object was created properly 
title = soup.find('title')
print(title)

#Use soup.title attribute to print the title
print(soup.title)

#Use the find_all function in the BeautifulSoup object, with element type `table`
#Assign the result to a list called `html_tables`
html_tables = soup.find_all('table')

#Check content of third table
first_launch_table = html_tables[2]
print(first_launch_table)

column_names = []

#Apply find_all() function with `th` element on first_launch_table
size = first_launch_table.find_all('th')

#Iterate each th element and apply the provided extract_column_from_header() to get a column name
#Append the Non-empty column name (`if name is not None and len(name) > 0`) into a list called column_names
for x in range(len(size)):
    name = extract_column_from_header(size[x])
    if (name is not None and len(name) > 0):
        column_names.append(name)

#Creating a data frame by parsing the launch HTML tables
launch_dict= dict.fromkeys(column_names)

#Remove an irrelvant column
del launch_dict['Date and time ( )']

#Let's initial the launch_dict with each value to be an empty list
launch_dict['Flight No.'] = []
launch_dict['Launch site'] = []
launch_dict['Payload'] = []
launch_dict['Payload mass'] = []
launch_dict['Orbit'] = []
launch_dict['Customer'] = []
launch_dict['Launch outcome'] = []
# Added some new columns
launch_dict['Version Booster']=[]
launch_dict['Booster landing']=[]
launch_dict['Date']=[]
launch_dict['Time']=[]

#Simplifying the parsing process
extracted_row = 0

#Extract each table 
for table_number,table in enumerate(soup.find_all('table',"wikitable plainrowheaders collapsible")):
   # get table row 
    for rows in table.find_all("tr"):
        #check to see if first table heading is as number corresponding to launch a number 
        if rows.th:
            if rows.th.string:
                flight_number=rows.th.string.strip()
                flag=flight_number.isdigit()
        else:
            flag=False
        
        #get table element 
        row=rows.find_all('td')
        
        #if it is number save cells in a dictonary 
        if flag:
            extracted_row += 1
            # Flight Number value
            # TODO: Append the flight_number into launch_dict with key `Flight No.`
            #print(flight_number)
            datatimelist=date_time(row[0])
            
            # Date value
            # TODO: Append the date into launch_dict with key `Date`
            date = datatimelist[0].strip(',')
            #print(date)
            
            # Time value
            # TODO: Append the time into launch_dict with key `Time`
            time = datatimelist[1]
            #print(time)
              
            # Booster version
            # TODO: Append the bv into launch_dict with key `Version Booster`
            bv=booster_version(row[1])
            if not(bv):
                bv=row[1].a.string
            print(bv)
            
            # Launch Site
            # TODO: Append the bv into launch_dict with key `Launch Site`
            launch_site = row[2].a.string
            #print(launch_site)
            
            # Payload
            # TODO: Append the payload into launch_dict with key `Payload`
            payload = row[3].a.string
            #print(payload)
            
            # Payload Mass
            # TODO: Append the payload_mass into launch_dict with key `Payload mass`
            payload_mass = get_mass(row[4])
            #print(payload)
            
            # Orbit
            # TODO: Append the orbit into launch_dict with key `Orbit`
            orbit = row[5].a.string
            #print(orbit)
            
            # Customer
            # TODO: Append the customer into launch_dict with key `Customer`
            customer = row[6].a.string
            #print(customer)
            
            # Launch outcome
            # TODO: Append the launch_outcome into launch_dict with key `Launch outcome`
            launch_outcome = list(row[7].strings)[0]
            #print(launch_outcome)
            
            # Booster landing
            # TODO: Append the launch_outcome into launch_dict with key `Booster landing`
            booster_landing = landing_status(row[8])
            #print(booster_landing)

#Creating a data frame into launch_dict
df=pd.DataFrame(launch_dict)

#Saving the file to a csv
df.to_csv('spacx_web_scrfaped.csv', index=False)
            
